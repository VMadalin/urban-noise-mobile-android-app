# Android
# Build your Android project with Gradle.
# Add steps that test, sign, and distribute the APK, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/android

name: Release

trigger:
  - master

pool:
  vmImage: 'macos-latest'

# Set variables once
variables:
  releaseVersion:

steps:

  # Config environment vars
  - script: |
      echo "sign.store.file=$(SIGN_STORE_FILE)" >> local.properties
      echo "sign.store.password=$(SIGN_STORE_PASSWORD)" >> local.properties
      echo "sign.key.alias=$(SIGN_KEY_ALIAS)" >> local.properties
      echo "sign.key.password=$(SIGN_KEY_PASSWORD)" >> local.properties

      echo "play.publisher.track=$(PLAY_PUBLISHER_TRACK)" >> local.properties
      echo "play.publisher.service.file=$(PLAY_PUBLISHER_SERVICE_FILE)" >> local.properties
    displayName: 'Config environment vars'

  # Decrypt sign secrets
  - task: Bash@3
    displayName: Decrypt sign secrets
    inputs:
      filePath: '$(System.DefaultWorkingDirectory)/scripts/release/signing-setup.sh'
      arguments: '$(SIGN_ENCRYPT_KEY)'

  # Download upload keystore
  - task: DownloadSecureFile@1
    name: uploadKeystore
    displayName: Download upload keystore
    inputs:
      secureFile: 'urbannoise-mobile-android-upload-keystore.jks'

  # Download play account
  - task: DownloadSecureFile@1
    name: playAccount
    displayName: Download play account
    inputs:
      secureFile: 'urbannoise-mobile-android-play-account.json'

  # Add secret files
  - script: |
      cp $(uploadKeystore.secureFilePath) $(System.DefaultWorkingDirectory)
      cp $(playAccount.secureFilePath) $(System.DefaultWorkingDirectory)
    displayName: 'Add secret files'

  # Publish release
  - task: Gradle@2
    displayName: Publish release
    inputs:
      workingDirectory: ''
      gradleWrapperFile: 'gradlew'
      gradleOptions: '-Xmx3072m'
      publishJUnitResults: false
      tasks: 'publishProdReleaseBundle'

  # Publish bundle
  - task: PublishPipelineArtifact@1
    displayName: Publish bundle
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/app/build/outputs/bundle/prodRelease'
      artifact: 'bundle'
      publishLocation: 'pipeline'

  # Publish mapping
  - task: PublishPipelineArtifact@1
    displayName: Publish mapping
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/app/build/outputs/mapping/prodRelease'
      artifact: 'mapping'
      publishLocation: 'pipeline'

  # Obtain release version
  - script: |
      RELEASE_VERSION=`cat $(System.DefaultWorkingDirectory)/version.txt`
      echo "##vso[task.setvariable variable=releaseVersion]$RELEASE_VERSION"
    displayName: Obtain release version

  # Clean secret files
  - script: |
      cp $(uploadKeystore.secureFilePath) $(System.DefaultWorkingDirectory)
      cp $(playAccount.secureFilePath) $(System.DefaultWorkingDirectory)
    displayName: 'Clean secret files'

  # Github release
  - task: GitHubRelease@1
    displayName: Github release
    inputs:
      gitHubConnection: 'urbannoise'
      repositoryName: '$(Build.Repository.Name)'
      action: 'create'
      target: '$(Build.SourceVersion)'
      tagSource: 'userSpecifiedTag'
      tag: 'v$(releaseVersion)'
      title: 'Release v$(releaseVersion)'
      changeLogCompareToRelease: 'lastFullRelease'
      changeLogType: 'commitBased'
      releaseNotesFilePath: '$(System.DefaultWorkingDirectory)/app/src/prod/play/listings/en-GB/default.txt'

  # Notify release
  - task: Bash@3
    displayName: Notify release
    inputs:
      targetType: 'inline'
      script: |
        RELEASE_NOTES=`cat $(System.DefaultWorkingDirectory)/app/src/prod/play/listings/en-GB/default.txt`
        SLACK_MESSAGE_DATA='{"text":"
        :android: New UrbanNoise release v.'$(releaseVersion)' :android:\n\n
        >>>
        Release notes:
        ```
        '$RELEASE_NOTES'
        ```
        Google Play: https://play.google.com/store/apps/details?id=org.urban.noise\n
        Github: https://github.com/urbannoise/urban-noise-mobile-android-app/releases/tag/v'$(releaseVersion)'
        "}'

        curl -X POST -H 'Content-type: application/json' --data "$SLACK_MESSAGE_DATA" "$SLACK_WEBHOOK"
    env:
      SLACK_WEBHOOK: $(SLACK_WEBHOOK)
